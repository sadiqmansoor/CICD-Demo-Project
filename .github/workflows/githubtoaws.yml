name: Deploy .NET Console App to EC2 via SSH

on:
  push:
    branches:
      - master

env:
  PROJECT_PATH: 'CICD-Demo.csproj'
  BUILD_OUTPUT_PATH: 'bin\Release\net8.0'
  REMOTE_DEPLOY_PATH: '\home\ec2-user\CICD-Demo-Project'  # Adjust if using Windows EC2

jobs:
  build-and-deploy:
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.x'

      - name: Restore and Build
        run: dotnet publish ${{ env.PROJECT_PATH }} --configuration Release

      - name: Create deployment bundle
        shell: pwsh
        run: |
          Compress-Archive -Path "${{ env.BUILD_OUTPUT_PATH }}/*" -DestinationPath deploy-bundle.zip

      - name: Set up SSH key for transfer
        shell: pwsh
        run: |
          $sshPath = "$env:USERPROFILE\.ssh"
          if (-not (Test-Path $sshPath)) {
            New-Item -Path $sshPath -ItemType Directory
          }

          $keyPath = "$sshPath\id_rsa"
          Set-Content -Path $keyPath -Value "${{ secrets.SSH_PRIVATE_KEY }}" -NoNewline
          icacls $keyPath /inheritance:r
          icacls $keyPath /grant:r "$($env:USERNAME):R"
          Write-Host "SSH key saved and permissions set."

      - name: Deploy files to EC2
        shell: pwsh
        run: |
          $scpExe = "C:\Program Files\Git\usr\bin\scp.exe"
          & $scpExe -i "$env:USERPROFILE\.ssh\id_rsa" -o StrictHostKeyChecking=no deploy-bundle.zip ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }}:${{ env.REMOTE_DEPLOY_PATH }}

      - name: Execute remote commands on EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd ${{ env.REMOTE_DEPLOY_PATH }}
            unzip -o deploy-bundle.zip
