name: Deploy .NET Console App to EC2 via SSH

on:
  push:
    branches:
      - master

env:
  PROJECT_PATH: 'CICD-Demo.csproj'
  BUILD_OUTPUT_PATH: 'bin/Release/net8.0'
  REMOTE_DEPLOY_PATH: 'C:/Users/Administrator/Desktop/CICD-Demo-Project'

jobs:
  build-and-deploy:
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.x'

      - name: Restore and Build
        run: dotnet publish ${{ env.PROJECT_PATH }} --configuration Release

      - name: Create deployment bundle
        run: Compress-Archive -Path ${{ env.BUILD_OUTPUT_PATH }}/* -DestinationPath deploy-bundle.zip

      - name: Set up SSH key for transfer
        shell: pwsh
        run: |
          # Install the NTFSSecurity module
          Install-Module -Name NTFSSecurity -Force -Scope CurrentUser

          # Create a .ssh directory if it doesn't exist
          if (-not (Test-Path "$env:HOMEPATH\.ssh")) {
            New-Item -Path "$env:HOMEPATH\.ssh" -ItemType Directory
          }
          # Write the private key to a file
          Set-Content -Path "$env:HOMEPATH\.ssh\id_rsa" -Value "${{ secrets.SSH_PRIVATE_KEY }}" -NoNewline
          
          # Secure the key file
          $acl = Get-Acl "$env:HOMEPATH\.ssh\id_rsa"
          $acl.SetAccessRuleProtection($true, $false)
          $acl.RemoveAccessRule((Get-AccessRule "$env:HOMEPATH\.ssh\id_rsa" -Identity "Everyone" -Type Allow))
          Set-Acl -Path "$env:HOMEPATH\.ssh\id_rsa" -AclObject $acl
          Write-Host "SSH private key file created and secured."

      - name: Deploy files to EC2
        shell: pwsh
        run: |
          # Use scp command to transfer the zipped file
          scp -i "$env:HOMEPATH\.ssh\id_rsa" deploy-bundle.zip ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }}:${{ env.REMOTE_DEPLOY_PATH }}/

      - name: Execute remote commands on EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd ${{ env.REMOTE_DEPLOY_PATH }}
            Expand-Archive -Path deploy-bundle.zip -DestinationPath . -Force
